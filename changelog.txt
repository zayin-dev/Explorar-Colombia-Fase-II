
CHANGELOG

Version 0.0.1

1. Organización de la estructura del proyecto
- Se crearon las carpetas `frontend` y `backend` para separar la lógica del cliente y del servidor.
- El archivo `app.js` fue movido al backend y posteriormente renombrado a `index.js`.
- Se inicializó un proyecto Node.js en la carpeta `backend` (`npm init -y`).
- Se instaló y configuró Express.js como framework para el backend.
- Se actualizó package.json con el archivo principal (`index.js`) y se añadió el script de inicio.

2. Configuración e inicialización de la base de datos (MySQL/XAMPP)
- Se instaló la dependencia `mysql2`.
- Se creó `db.config.js` dentro de `backend/config` con datos de conexión.
- Se creó el script `db_setup.js` para crear la base de datos `webapp_db` y las tablas: `users`, `products`, `categories`, `product_categories`.

3. Implementación de rutas con Express Router
- Se creó `routes/user.routes.js`.
- Se configuró `index.js` para montar las rutas bajo `/api/users`.
- Se añadió `express.json()` para parseo de cuerpos JSON.

4. CRUD completo para usuarios
- Se creó `controllers/user.controller.js`.
- Se implementaron funciones para `createUser`, `getAllUsers`, `getUserById`, `updateUser`, `deleteUser`.
- Se vincularon las rutas en `user.routes.js`.
- Posteriormente se protegieron con JWT.

5. Sistema de login y autenticación con JWT
- Se instaló `jsonwebtoken`.
- Se creó `auth.controller.js` con login que verifica credenciales y genera un JWT.
- Se montaron las rutas de login bajo `/api/auth`.

6. CORS y conexión entre frontend y backend
- Se instaló y configuró `cors` en el backend para permitir comunicación cross-origin.

7. Protección de rutas con middleware JWT
- Se creó `middleware/authJwt.js` con `verifyToken`.
- Se protegieron rutas sensibles (`GET`, `PUT`, `DELETE` de usuarios).

8. Gestión de roles y autorización
- Se añadió columna `role` en tabla `users`.
- Se actualizó `seed_users.js` para crear usuarios con roles `admin` y `user`.
- Se añadió `isAdmin` en `authJwt.js`.
- Se protegieron rutas críticas con `verifyToken` + `isAdmin`.

9. Seed de usuarios para testing
- Se creó `seed_users.js` para insertar:
  - `adminuser` (admin)
  - `testuser1`, `testuser2` (usuarios normales)
- Contraseñas hasheadas con `bcryptjs`.

10. Modificación del componente de login en React
- Se reemplazó lógica de prueba por llamada real a `/api/auth/login`.
- En éxito: se guarda `accessToken`, se redirige.
- En error: se muestra mensaje adecuado.

---

Version 0.0.2

- Se modifico el script de creacion de la base de datos. Se eliminaron tablas antiguas y en su lugar se colocaron un total de tres tablas las cuales van mas acorde con el proyecto. Los nuevos cambios tambien incluyen la eliminacion de tablas antiguas y nuevas, asi se evitaran errores de tablas duplicadas.

- Se modifico el script de creacion de usuarios para que ahora, ademas de crear los usuarios, tambien cree los datos de prueba para los destinos turisticos y las categorias de los destinos turisticos.

- Se implementa la opcion de subida de archivos para que los usuarios puedan subir archivos a la base de datos, mas especificamente se implemento la subida de imagenes, para que de esta forma los usuarios puedan subir imagenes para su perfil. Para ello:
    - Se modifico el archivo `index.js` en el backend para que acepte archivos, los cuales se guardan en la carpeta `public/uploads` 
    - Se implemento un middleware para que se encargue de la subida de archivos. La dependencia `multer` se encarga de la subida de archivos.
    - Se agrego la ruta protegida `PUT /api/users/:id/profile-image` que utilizara el middleware de subida de archivos para subir la imagen del perfil del usuario.
    - se modifico el archivo `vite.config.js` agregando un proxy para que se pueda acceder a la carpeta `public/uploads` desde el frontend.
    - 
    
- Al parecer, al momento de dar click en el boton de iniciar sesion en el login, por alguna razon el panel se hace accesible sin la necesidad de tener credenciales. Eso se ha solucionado modificando la logica del login en el archivo `App.jsx` para que ahora cambie el estado de la variable `isAuthenticated` a `false` cuando el usuario no se loguee correctamente.

